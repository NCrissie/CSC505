import random
from typing import List

# Databases
pothole_db = {}
workorder_db = {}


# Blanket user class
class User:
    def __init__(self, user_id: str, username: str, password: str, email: str):
        self.user_id = user_id
        self.username = username
        self.password = password
        self.email = email

    def login(self):
        print(f"{self.username} logged in.")

    def logout(self):
        print(f"{self.username} logged out.")


# Admin class
class Admin(User):
    def admin_login(self):
        print("Admin logged in")

    def admin_action(self):
        print("Action applied by Admin")


# Customer class
class Customer(User):
    def report_pothole(self):
        location = input("Enter pothole location (e.g., '123 Main St'): ")
        severity = random.randint(1, 10)
        size = int(input("Enter pothole size on a scale of 1 to 10: "))
        position = input("Enter pothole position (middle, curb, etc.): ")
        # For module example. Instead of actually generating the district, I just want to show how it WOULD work
        district = "District 1"

        pothole_id = f"POT{len(pothole_db) + 1}"
        pothole = Pothole(pothole_id, location, severity, size, position, district)
        pothole_db[pothole_id] = pothole

        print(f"Pothole reported with ID: {pothole_id}")
        print(f"Location: {location}, Severity: {severity}, Size: {size}, Position: {position}, District: {district}")

    def view_pothole_status(self, pothole_id: str):
        pothole = pothole_db.get(pothole_id)
        if pothole:
            print(f"Pothole ID {pothole_id} - Status: {pothole.status}")
        else:
            print(f"Pothole ID {pothole_id} not found.")


# Repairman class
class Repairman(User):
    def __init__(self, user_id: str, username: str, password: str, email: str, crew_id: str):
        super().__init__(user_id, username, password, email)
        self.crew_id = crew_id

    def view_workorder(self):
        for workorder_id, workorder in workorder_db.items():
            print(f"\nWork Order ID: {workorder_id}")
            print(f"Status: {workorder.status}")
            print(f"Pothole Location: {workorder.pothole.location}")
            print(f"Severity: {workorder.pothole.severity}")

        while True:
            workorder_id = input("Enter Workorder ID to close: ")
            workorder = workorder_db.get(workorder_id)
            if workorder:
                workorder.status = "Repaired"
                print(f"Workorder ID {workorder_id} closed.")
                break
            else:
                print(f"Workorder ID {workorder_id} not found. Please try again.")


# Pothole class
class Pothole:
    def __init__(self, pothole_id: str, location: str, severity: int, size: int, position: str, district: str):
        self.pothole_id = pothole_id
        self.location = location
        self.severity = severity
        self.size = size
        self.position = position
        self.district = district
        self.priority = self.calculate_priority()
        self.status = "Reported"

    def calculate_priority(self):
        return self.severity


# Workorder class
class Workorder:
    def __init__(self, workorder_id: str, pothole: Pothole, repair_crew_id: str, crew_size: int, equipment: List[str]):
        self.workorder_id = workorder_id
        self.pothole = pothole
        self.repair_crew_id = repair_crew_id
        self.crew_size = crew_size
        self.equipment = equipment
        self.hours_spent = 0
        self.status = "In Progress"
        self.filler_material_used = 0.0
        self.repair_cost = 0.0

    def calculate_repair_cost(self, hourly_rate: float, filler_cost: float):
        self.repair_cost = (self.hours_spent * hourly_rate) + (self.filler_material_used * filler_cost)
        print(f"Work Order {self.workorder_id} - Repair cost calculated: ${self.repair_cost}")


# Sim how it would work for the module
if __name__ == "__main__":
    # This is where the customer would report a pothole
    customer = Customer("C001", "customerUser", "customerPass", "customer@example.com")
    customer.login()
    customer.report_pothole()
    customer.logout()

    # Repairman logs in and checks work orders
    repairman = Repairman("R001", "repairUser", "repairPass", "repairman@example.com", "Crew001")
    repairman.login()

    # Generating a work order for the reported pothole
    pothole_id = next(iter(pothole_db))
    pothole = pothole_db[pothole_id]
    workorder_id = f"WO{len(workorder_db) + 1}"
    workorder = Workorder(workorder_id, pothole, repairman.crew_id, crew_size=3, equipment=["Truck", "Drill"])
    workorder_db[workorder_id] = workorder

    # Repairman views and closes the work order
    repairman.view_workorder()
    repairman.logout()
